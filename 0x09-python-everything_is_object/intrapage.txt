Holberton School
My planning
My projects
My concepts
My batchmates
All students
QA reviews I can make
My Captain's Logs
My Officers
My Speakers of the day
My Servers
 Docker white d7f9831c7f629cbec750008e0d9726068396ee5bdde8dfccebe99a083d0de930 My Containers
My profile
You just released the optional tasks of this project. Have fun!
0x09. Python - Everything is object
 Higher-level programming ― Python

 by Guillaume, Full stack engineer

 weight: 1

 Ongoing project - started 05-24-2017, must end by 05-25-2017 (in about 10 hours) - you're 0% done.

 Manual QA review must be done (request it when you are done on the project)

know

Now that we understand that everything is object and have a little bit of knowledge, let's make a pause, and look a little bit closer at how Python works with different types of objects. BTW, have you ever modified a variable without knowing/wanting it? I mean:

>>> a = 1
>>> b = a
>>> a = 2
>>> b
1
>>> 
OK. But what about this?

>>> l = [1, 2, 3]
>>> m = l
>>> l[0] = 'x'
>>> m
['x', 2, 3]
>>> 
Blow


This project is a little bit different than usual projects. The first part is only questions about Python's specificity like "What should be the result of...". You should read all documentation first (as usual :)), then take the time to think and brainstorm with your peers about what you think and why. Try to do this without coding anything for a few hours. Trying examples in the Python interpreter will give you most of the answers without having to think about it. Don't go this route. First read, then think, then brainstorm together. Only then you can test in the interpreter. It's important that you truly understand the reasons behind the answers of all those tasks so that you can apply the same logic to other variables and other variable types. The biggest mandatory task is the blog post and it will count for 50% of the total score of the project.

Note that during interviews for Python positions, you will most likely have to answer to these type of questions.

All your answers should be only one line in a file. No space before or after the answer.

Readme

9.10. Objects and values
9.11. Aliasing
Immutable vs mutable types
Mutation
9.12. Cloning lists
Python tuples: immutable but potentially changing
What you should learn from this project

At the end of this project you are expected to be able to explain to anyone, without the help of Google:

Why Python programming is awesome (don’t forget to tweet today, with the hashtag #pythoniscool :))
What is an object
What is the difference between a class and an object or instance
What is the difference between immutable object and mutable object
What is a reference
What is an assignment
What is an alias
How to know if two variables are identical
How to know if two variables are linked to the same object
How to display the variable identifier (which is the memory address in the CPython implementation)
What is mutable and immutable
What are the builtin mutable types
What are the builtin immutable types
How does Python pass variables to functions
Requirements for Python scripts

Allowed editors: vi, vim, emacs
All your files will be interpreted/compiled on Ubuntu 14.04 LTS using python3 (version 3.4.3)
All your files should end with a new line
The first line of all your files should be exactly #!/usr/bin/python3
A README.md file, at the root of the folder of the project, is mandatory
Your code should use the PEP 8 style
All your files must be executable
The length of your files will be tested using wc
Tasks
  Done?  
Help!
0. Who I am? mandatory

What function would you use to print the type of an object? Write the name of the function in the file, without the ()

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 0-answer.txt
  Done?  
Help!
1. Where are you? mandatory

How to get variable identifier (which is the memory address in the CPython implementation)? Write the name of the function in the file, without the ()

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 1-answer.txt
  Done?  
Help!
2. Right count mandatory

In the following code, do a and b point to the same object? Answer with Yes or No.

>>> a = 89
>>> b = 100
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 2-answer.txt
  Done?  
Help!
3. Right count = mandatory

In the following code, do a and b point to the same object? Answer with Yes or No.

>>> a = 89
>>> b = 89
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 3-answer.txt
  Done?  
Help!
4. Right count = mandatory

In the following code, do a and b point to the same object? Answer with Yes or No.

>>> a = 89
>>> b = a
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 4-answer.txt
  Done?  
Help!
5. Right count =+ mandatory

In the following code, do a and b point to the same object? Answer with Yes or No.

>>> a = 89
>>> b = a + 1
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 5-answer.txt
  Done?  
Help!
6. Is equal mandatory

What should those 3 lines print:

>>> s1 = "Holberton"
>>> s2 = s1
>>> print(s1 == s2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 6-answer.txt
  Done?  
Help!
7. Is the same mandatory

What should those 3 lines print:

>>> s1 = "Holberton"
>>> s2 = s1
>>> print(s1 is s2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 7-answer.txt
  Done?  
Help!
8. Is really equal mandatory

What should those 3 lines print:

>>> s1 = "Holberton"
>>> s2 = "Holberton"
>>> print(s1 == s2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 8-answer.txt
  Done?  
Help!
9. Is really the same mandatory

What should those 3 lines print:

>>> s1 = "Holberton"
>>> s2 = "Holberton"
>>> print(s1 is s2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 9-answer.txt
  Done?  
Help!
10. And with a list, is it equal mandatory

What should those 3 lines print:

>>> l1 = [1, 2, 3]
>>> l2 = [1, 2, 3] 
>>> print(l1 == l2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 10-answer.txt
  Done?  
Help!
11. And with a list, is it the same mandatory

What should those 3 lines print:

>>> l1 = [1, 2, 3]
>>> l2 = [1, 2, 3] 
>>> print(l1 is l2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 11-answer.txt
  Done?  
Help!
12. And with a list, is it really equal mandatory

What should those 3 lines print:

>>> l1 = [1, 2, 3]
>>> l2 = l1
>>> print(l1 == l2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 12-answer.txt
  Done?  
Help!
13. And with a list, is it really the same mandatory

What should print those 3 lines:

>>> l1 = [1, 2, 3]
>>> l2 = l1
>>> print(l1 is l2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 13-answer.txt
  Done?  
Help!
14. List append mandatory

What does this script print?

l1 = [1, 2, 3]
l2 = l1
l1.append(4)
print(l2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 14-answer.txt
  Done?  
Help!
15. List add mandatory

What does this script print?

l1 = [1, 2, 3]
l2 = l1
l1 = l1 + [4]
print(l2)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 15-answer.txt
  Done?  
Help!
16. Integer incrementation mandatory

What does this script print?

def increment(n):
    n += 1

a = 1
increment(a)
print(a)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 16-answer.txt
  Done?  
Help!
17. List incrementation mandatory

What does this script print?

def increment(n):
    n.append(4)

l = [1, 2, 3]
increment(l)
print(l)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 17-answer.txt
  Done?  
Help!
18. List assignation mandatory

What does this script print?

def assign_value(n, v):
    n = v

l1 = [1, 2, 3]
l2 = [4, 5, 6]
assign_value(l1, l2)
print(l1)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 18-answer.txt
  Done?  
Help!
19. Copy a list object mandatory

Write a function def copy_list(l): that returns a copy of a list.

The input list can contain any type of objects
Your file should be maximum 3-line long (no documentation needed)
You are not allowed to import any module
guillaume@ubuntu:~/0x09$ cat 19-main.py
#!/usr/bin/python3
copy_list = __import__('19-copy_list').copy_list

my_list = [1, 2, 3]
print(my_list)

new_list = copy_list(my_list)

print(my_list)
print(new_list)

print(new_list == my_list)
print(new_list is my_list)

guillaume@ubuntu:~/0x09$ ./19-main.py
[1, 2, 3]
[1, 2, 3]
[1, 2, 3]
True
False
guillaume@ubuntu:~/0x09$ wc -l 19-copy_list.py 
3 19-copy_list.py
guillaume@ubuntu:~/0x09$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 19-copy_list.py
  Done?  
Help!
20. Tuple or not? mandatory

a = ()
Is a a tuple? Answer with Yes or No.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 20-answer.txt
  Done?  
Help!
21. Tuple or not? mandatory

a = (1, 2)
Is a a tuple? Answer with Yes or No.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 21-answer.txt
  Done?  
Help!
22. Tuple or not? mandatory

a = (1)
Is a a tuple? Answer with Yes or No.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 22-answer.txt
  Done?  
Help!
23. Tuple or not? mandatory

a = (1, )
Is a a tuple? Answer with Yes or No.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 23-answer.txt
  Done?  
Help!
24. Richard Sim's special #0 mandatory

What does this script print?

a = (1)
b = (1)
a is b
Who is Richard Sim?

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 24-answer.txt
  Done?  
Help!
25. Richard Sim's special #1 mandatory

What does this script print?

a = (1, 2)
b = (1, 2)
a is b
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 25-answer.txt
  Done?  
Help!
26. Richard Sim's special #2 mandatory

What does this script print?

a = ()
b = ()
a is b
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 26-answer.txt
  Done?  
Help!
27. Richard Sim's special #3 mandatory

>>> id(a)
139926795932424
>>> a
[1, 2, 3, 4]
>>> a = a + [5]
>>> id(a)
Will the last line of this script print 139926795932424? Answer with Yes or No.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 27-answer.txt
  Done?  
Help!
28. Richard Sim's special #4 mandatory

>>> a
[1, 2, 3]
>>> id (a)
139926795932424
>>> a += [4]
>>> id(a)
Will the last line of this script print 139926795932424? Answer with Yes or No.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 28-answer.txt
  Done?  
Help!
29. Python3: Mutable, Immutable... everything is object! mandatory

Write a blog post about everything you did just learn / this project is covering. Your blog post should be articulated this way (one paragraph per item):

Introduction
id and type
mutable objects
immutable objects
why does it matter and how differently does Python treat mutable and immutable objects
how arguments are passed to functions and what does that imply for mutable and immutable objects
If you worked on advanced tasks, please also include what you did learn in those tasks in the blog post.

Your posts should have many code/output examples to illustrate what you are explaining, and at least one picture, at the top. Publish your blog post on Medium or LinkedIn, and share it at least on Twitter and LinkedIn.

When done, please fill this form.

  Done?  
Help!
30. #pythonic #advanced

Write a function magic_string() that returns a string "Holberton" n times the number of the iteration (see code):

Format: see example
Your file should be maximum 4-line long (no documentation needed)
You are not allowed to import any module
guillaume@ubuntu:~/0x09$ cat 100-main.py
#!/usr/bin/python3
magic_string = __import__('100-magic_string').magic_string

for i in range(10):
    print(magic_string())

guillaume@ubuntu:~/0x09$ ./100-main.py | cat -e
Holberton$
Holberton, Holberton$
Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton$
Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton, Holberton$
guillaume@ubuntu:~/0x09$ wc -l 100-magic_string.py 
4 100-magic_string.py
guillaume@ubuntu:~/0x09$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 100-magic_string.py
  Done?  
Help!
31. Low memory cost #advanced

Write a class LockedClass with no class or object attribute, that prevents the user to dynamically create new instance attributes, except if the new instance attribute is called first_name.

You are not allowed to import any module
guillaume@ubuntu:~/0x09$ cat 101-main.py
#!/usr/bin/python3
LockedClass = __import__('101-locked_class').LockedClass

lc = LockedClass()
lc.first_name = "John"
try:
    lc.last_name = "Snow"
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

guillaume@ubuntu:~/0x09$ ./101-main.py
[AttributeError] 'LockedClass' object has no attribute 'last_name'
guillaume@ubuntu:~/0x09$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 101-locked_class.py
  Done?  
Help!
32. int 1/3 #advanced

julien@ubuntu:/python3$ cat int.py 
a = 1
b = 1
julien@ubuntu:/python3$ 
Assuming we are using a CPython implementation of Python3 with default options/configuration:

How many int objects are created by the execution of the first line of the script? (103-line1.txt)
How many int objects are created by the execution of the second line of the script (103-line2.txt)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 103-line1.txt, 103-line2.txt
  Done?  
Help!
33. int 2/3 #advanced

julien@ubuntu:/python3$ cat int.py 
a = 1024
b = 1024
del a
del b
c = 1024
julien@ubuntu:/python3$ 
Assuming we are using a CPython implementation of Python3 with default options/configuration:

How many int objects are created by the execution of the first line of the script? (104-line1.txt)
How many int objects are created by the execution of the second line of the script (104-line2.txt)
After the execution of line 3, is the int object pointed by a deleted? Answer with Yes or No (104-line3.txt)
After the execution of line 4, is the int object pointed by b deleted? Answer with Yes or No (104-line4.txt)
How many int objects are created by the execution of the last line of the script (104-line5.txt)
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 104-line1.txt, 104-line2.txt, 104-line3.txt, 104-line4.txt, 104-line5.txt
  Done?  
Help!
34. int 3/3 #advanced

julien@ubuntu:/tmp/so$ cat int.py 
print("I")
print("Love")
print("Python")
julien@ubuntu:/tmp/so$ 
Assuming we are using a CPython implementation of Python3 with default options/configuration:

Before the execution of line 2 (print("Love")), how many int objects have been created and are still in memory? (105-line1.txt)
Why? (optional blog post :))
Hint: NSMALLPOSINTS, NSMALLNEGINTS



Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x09-python-everything_is_object
File: 105-line1.txt
